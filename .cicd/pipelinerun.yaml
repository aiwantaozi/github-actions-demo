apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1alpha1","kind":"Pipeline","metadata":{"annotations":{},"name":"test","namespace":"default"},"spec":{"description":"this pipeline offers a typical CI/CD process, with a flow including:\n- fetching a git repository as the source\n- using buildah to build a Docker image by Dockerfile\n- pusing the built Docker image to a desired repository\n- deploying it to Kubernetes cluster\n","params":[{"default":"https://github.com/aiwantaozi/github-actions-demo","description":"The git repository URL to clone from.","name":"repo-url","type":"string"},{"default":"main","description":"The git tag to clone.","name":"revision","type":"string"},{"default":"http://192.168.0.102:7890","name":"httpProxy"},{"default":"http://192.168.0.102:7890","name":"httpsProxy"},{"default":"localhost,127.0.0.1,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.59.0/24,192.168.49.0/24,0.96.0.0/12","name":"noProxy"},{"default":"true","name":"verbose"},{"default":"github.com/aiwantaozi/github-actions-demo","name":"package"},{"default":".","name":"packages"},{"default":"micheliac/pipeline-test:latest","description":"The image full path to host the built image, with version tag, e.g. image-registry.openshift-image-registry.svc:5000/tekton-pipelines/spring-boot-docker:v1.0.0.","name":"image-full-path-with-tag","type":"string"},{"default":"package/Dockerfile","name":"dockerfile","type":"string"},{"description":"The manifest file for deployment.","name":"deployment-manifest","type":"string"}],"tasks":[{"name":"fetch-repository","params":[{"name":"url","value":"$(params.repo-url)"},{"name":"revision","value":"$(params.revision)"},{"name":"httpProxy","value":"$(params.httpProxy)"},{"name":"httpsProxy","value":"$(params.httpsProxy)"},{"name":"noProxy","value":"$(params.noProxy)"},{"name":"deleteExisting","value":"true"}],"taskRef":{"name":"git-clone"},"workspaces":[{"name":"output","workspace":"workspace"},{"name":"ssh-directory","workspace":"ssh-directory"}]},{"name":"go-build","params":[{"name":"package","value":"$(params.package)"},{"name":"packages","value":"$(params.packages)"}],"runAfter":["fetch-repository"],"taskRef":{"name":"golang-build"},"workspaces":[{"name":"source","workspace":"workspace"},{"name":"dockerconfig","workspace":"dockerconfig"}]},{"name":"kaniko","params":[{"name":"IMAGE","value":"$(params.image-full-path-with-tag)"},{"name":"DOCKERFILE","value":"$(params.dockerfile)"}],"runAfter":["go-build"],"taskRef":{"name":"kaniko"},"workspaces":[{"name":"source","workspace":"workspace"},{"name":"dockerconfig","workspace":"dockerconfig"}]},{"name":"deploy","params":[{"name":"script","value":"kubectl apply -f $(params.deployment-manifest)\necho \"----------\"\nkubectl get deployment\n"}],"runAfter":["kaniko"],"taskRef":{"name":"kubernetes-actions"},"workspaces":[{"name":"kubeconfig-dir","workspace":"kubeconfig-dir"},{"name":"manifest-dir","workspace":"manifest-dir"}]}],"workspaces":[{"name":"workspace"},{"name":"ssh-directory"},{"name":"dockerconfig"},{"name":"manifest-dir"},{"name":"kubeconfig-dir"}]}}
  creationTimestamp: "2022-02-26T13:44:24Z"
  generateName: test-run-
  generation: 1
  labels:
    tekton.dev/pipeline: test
  name: test-run-9px9j
  namespace: default
  resourceVersion: "480734"
  uid: 011f1a54-1ead-4e8a-984d-95fa12386390
spec:
  params:
    - name: deployment-manifest
      value: ""
    - name: httpProxy
      value: http://192.168.0.102:7890
    - name: httpsProxy
      value: http://192.168.0.102:7890
    - name: image-full-path-with-tag
      value: micheliac/pipeline-test:latest
    - name: noProxy
      value: localhost,127.0.0.1,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.59.0/24,192.168.49.0/24,0.96.0.0/12
    - name: package
      value: github.com/aiwantaozi/github-actions-demo
    - name: packages
      value: .
    - name: repo-url
      value: https://github.com/aiwantaozi/github-actions-demo
    - name: revision
      value: main
    - name: verbose
      value: "true"
  pipelineRef:
    name: test
  serviceAccountName: default
  timeout: 1h0m0s
  workspaces:
    - name: ssh-directory
      secret:
        secretName: my-ssh-credentials
    - name: dockerconfig
      secret:
        secretName: my-dockerconfig
    - configMap:
        name: manifests
      name: manifest-dir
    - emptyDir: {}
      name: ""
    - name: workspace
      persistentVolumeClaim:
        claimName: myclaim
    - name: kubeconfig-dir
      secret:
        secretName: kubeconfig
status:
  completionTime: "2022-02-26T13:45:00Z"
  conditions:
    - lastTransitionTime: "2022-02-26T13:45:00Z"
      message: "Tasks Completed: 3 (Failed: 1, Cancelled 0), Skipped: 1"
      reason: Failed
      status: "False"
      type: Succeeded
  pipelineSpec:
    description: |
      this pipeline offers a typical CI/CD process, with a flow including:
      - fetching a git repository as the source
      - using buildah to build a Docker image by Dockerfile
      - pusing the built Docker image to a desired repository
      - deploying it to Kubernetes cluster
    params:
      - default: https://github.com/aiwantaozi/github-actions-demo
        description: The git repository URL to clone from.
        name: repo-url
        type: string
      - default: main
        description: The git tag to clone.
        name: revision
        type: string
      - default: http://192.168.0.102:7890
        name: httpProxy
        type: string
      - default: http://192.168.0.102:7890
        name: httpsProxy
        type: string
      - default: localhost,127.0.0.1,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.59.0/24,192.168.49.0/24,0.96.0.0/12
        name: noProxy
        type: string
      - default: "true"
        name: verbose
        type: string
      - default: github.com/aiwantaozi/github-actions-demo
        name: package
        type: string
      - default: .
        name: packages
        type: string
      - default: micheliac/pipeline-test:latest
        description:
          The image full path to host the built image, with version tag,
          e.g. image-registry.openshift-image-registry.svc:5000/tekton-pipelines/spring-boot-docker:v1.0.0.
        name: image-full-path-with-tag
        type: string
      - description: The manifest file for deployment.
        name: deployment-manifest
        type: string
    tasks:
      - name: fetch-repository
        params:
          - name: url
            value: $(params.repo-url)
          - name: revision
            value: $(params.revision)
          - name: httpProxy
            value: $(params.httpProxy)
          - name: httpsProxy
            value: $(params.httpsProxy)
          - name: noProxy
            value: $(params.noProxy)
          - name: deleteExisting
            value: "true"
        taskRef:
          kind: Task
          name: git-clone
        workspaces:
          - name: output
            workspace: workspace
          - name: ssh-directory
            workspace: ssh-directory
      - name: go-build
        params:
          - name: package
            value: $(params.package)
          - name: packages
            value: $(params.packages)
        runAfter:
          - fetch-repository
        taskRef:
          kind: Task
          name: golang-build
        workspaces:
          - name: source
            workspace: workspace
          - name: dockerconfig
            workspace: dockerconfig
      - name: kaniko
        params:
          - name: IMAGE
            value: $(params.image-full-path-with-tag)
          - name: DOCKERFILE
            value: $(params.dockerfile)
        runAfter:
          - go-build
        taskRef:
          kind: Task
          name: kaniko
        workspaces:
          - name: source
            workspace: workspace
          - name: dockerconfig
            workspace: dockerconfig
      - name: deploy
        params:
          - name: script
            value: |
              kubectl apply -f $(params.deployment-manifest)
              echo "----------"
              kubectl get deployment
        runAfter:
          - kaniko
        taskRef:
          kind: Task
          name: kubernetes-actions
        workspaces:
          - name: kubeconfig-dir
            workspace: kubeconfig-dir
          - name: manifest-dir
            workspace: manifest-dir
    workspaces:
      - name: workspace
      - name: ssh-directory
      - name: dockerconfig
      - name: manifest-dir
      - name: kubeconfig-dir
  skippedTasks:
    - name: deploy
  startTime: "2022-02-26T13:44:24Z"
  taskRuns:
    test-run-9px9j-fetch-repository-8q9wx:
      pipelineTaskName: fetch-repository
      status:
        completionTime: "2022-02-26T13:44:37Z"
        conditions:
          - lastTransitionTime: "2022-02-26T13:44:37Z"
            message: All Steps have completed executing
            reason: Succeeded
            status: "True"
            type: Succeeded
        podName: test-run-9px9j-fetch-repository-8q9wx-pod-9rqbb
        startTime: "2022-02-26T13:44:24Z"
        steps:
          - container: step-clone
            imageID: docker-pullable://gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init@sha256:db18a9c1607c8cbbcd72f61d0c4d795b9ff528669deacd5f8a1672e4ef198ffd
            name: clone
            terminated:
              containerID: docker://44bd5e64d7930fd4cbbe12483b9000364c9eea1a01785c88c2d25c10e530d971
              exitCode: 0
              finishedAt: "2022-02-26T13:44:37Z"
              message: '[{"key":"commit","value":"c0a945f680e1014397676521a9ca281d836b999c","type":"TaskRunResult"},{"key":"url","value":"https://github.com/aiwantaozi/github-actions-demo","type":"TaskRunResult"}]'
              reason: Completed
              startedAt: "2022-02-26T13:44:35Z"
        taskResults:
          - name: commit
            value: c0a945f680e1014397676521a9ca281d836b999c
          - name: url
            value: https://github.com/aiwantaozi/github-actions-demo
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ""
              description: Revision to checkout. (branch, tag, sha, ref, etc...)
              name: revision
              type: string
            - default: ""
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: "true"
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: "1"
              description:
                Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: "true"
              description:
                Set the `http.sslVerify` global git config. Setting this
                to `false` is not advised unless you are sure that you trust your git
                remote.
              name: sslVerify
              type: string
            - default: ""
              description:
                Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ""
              description:
                Define the directory patterns to match or exclude when performing
                a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: "true"
              description:
                Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ""
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ""
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ""
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: "true"
              description: Log the commands that are executed during `git-clone`'s operation.
              name: verbose
              type: string
            - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
                the gitInitImage param with an image containing custom user configuration.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
            - description: The precise URL that was fetched by this Task.
              name: url
          steps:
            - env:
                - name: HOME
                  value: $(params.userHome)
                - name: PARAM_URL
                  value: $(params.url)
                - name: PARAM_REVISION
                  value: $(params.revision)
                - name: PARAM_REFSPEC
                  value: $(params.refspec)
                - name: PARAM_SUBMODULES
                  value: $(params.submodules)
                - name: PARAM_DEPTH
                  value: $(params.depth)
                - name: PARAM_SSL_VERIFY
                  value: $(params.sslVerify)
                - name: PARAM_SUBDIRECTORY
                  value: $(params.subdirectory)
                - name: PARAM_DELETE_EXISTING
                  value: $(params.deleteExisting)
                - name: PARAM_HTTP_PROXY
                  value: $(params.httpProxy)
                - name: PARAM_HTTPS_PROXY
                  value: $(params.httpsProxy)
                - name: PARAM_NO_PROXY
                  value: $(params.noProxy)
                - name: PARAM_VERBOSE
                  value: $(params.verbose)
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  value: $(params.sparseCheckoutDirectories)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: $(workspaces.ssl-ca-directory.bound)
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                  value: $(workspaces.ssl-ca-directory.path)
              image: $(params.gitInitImage)
              name: clone
              resources: {}
              script: |
                #!/usr/bin/env sh
                set -eu

                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi

                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi

                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                fi
                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }

                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi

                test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
                test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
                test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"
                RESULT_SHA="$(git rev-parse HEAD)"
                EXIT_CODE="$?"
                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi
                printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
                printf "%s" "${PARAM_URL}" > "$(results.url.path)"
          workspaces:
            - description:
                The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: |
                A .ssh directory with private key, known_hosts, config, etc. Copied to
                the user's home before git commands are executed. Used to authenticate
                with the git remote when performing the clone. Binding a Secret to this
                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: |
                A Workspace containing a .gitconfig and .git-credentials file. These
                will be copied to the user's home before any git commands are run. Any
                other files in this Workspace are ignored. It is strongly recommended
                to use ssh-directory over basic-auth whenever possible and to bind a
                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: |
                A workspace containing CA certificates, this will be used by Git to
                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
    test-run-9px9j-go-build-9qf7j:
      pipelineTaskName: go-build
      status:
        completionTime: "2022-02-26T13:44:48Z"
        conditions:
          - lastTransitionTime: "2022-02-26T13:44:48Z"
            message: All Steps have completed executing
            reason: Succeeded
            status: "True"
            type: Succeeded
        podName: test-run-9px9j-go-build-9qf7j-pod-wt2kr
        startTime: "2022-02-26T13:44:37Z"
        steps:
          - container: step-build
            imageID: docker-pullable://golang@sha256:e06c83493ef6d69c95018da90f2887bf337470db074d3c648b8b648d8e3c441e
            name: build
            terminated:
              containerID: docker://0ab7f11ac99e0dd08ecc19f0e1cf0d87ad6fb3bc358ea8d827d32ebb11c903ff
              exitCode: 0
              finishedAt: "2022-02-26T13:44:47Z"
              reason: Completed
              startedAt: "2022-02-26T13:44:46Z"
        taskSpec:
          description: This Task is Golang task to build Go projects.
          params:
            - description: base package to build in
              name: package
              type: string
            - default: ./cmd/...
              description: "packages to build (default: ./cmd/...)"
              name: packages
              type: string
            - default: latest
              description: golang version to use for builds
              name: version
              type: string
            - default: -v
              description: flags to use for the test command
              name: flags
              type: string
            - default: linux
              description: running program's operating system target
              name: GOOS
              type: string
            - default: amd64
              description: running program's architecture target
              name: GOARCH
              type: string
            - default: auto
              description: value of module support
              name: GO111MODULE
              type: string
            - default: ""
              description: Go caching directory path
              name: GOCACHE
              type: string
            - default: ""
              description: Go mod caching directory path
              name: GOMODCACHE
              type: string
            - default: ""
              description:
                Toggle cgo tool during Go build. Use value '0' to disable
                cgo (for static builds).
              name: CGO_ENABLED
              type: string
            - default: ""
              description:
                Go checksum database url. Use value 'off' to disable checksum
                validation.
              name: GOSUMDB
              type: string
          steps:
            - env:
                - name: GOOS
                  value: $(params.GOOS)
                - name: GOARCH
                  value: $(params.GOARCH)
                - name: GO111MODULE
                  value: $(params.GO111MODULE)
                - name: GOCACHE
                  value: $(params.GOCACHE)
                - name: GOMODCACHE
                  value: $(params.GOMODCACHE)
                - name: CGO_ENABLED
                  value: $(params.CGO_ENABLED)
                - name: GOSUMDB
                  value: $(params.GOSUMDB)
              image: docker.io/library/golang:$(params.version)
              name: build
              resources: {}
              script: |
                if [ ! -e $GOPATH/src/$(params.package)/go.mod ];then
                  SRC_PATH="$GOPATH/src/$(params.package)"
                  mkdir -p $SRC_PATH
                  cp -R "$(workspaces.source.path)"/* $SRC_PATH
                  cd $SRC_PATH
                fi
                echo check dockerconfig
                cat /kaniko/.docker/config.json
                go build $(params.flags) $(params.packages)
              workingDir: $(workspaces.source.path)
          workspaces:
            - name: source
            - description: Includes a docker `config.json`
              mountPath: /kaniko/.docker
              name: dockerconfig
              optional: true
    test-run-9px9j-kaniko-hjk64:
      pipelineTaskName: kaniko
      status:
        completionTime: "2022-02-26T13:45:00Z"
        conditions:
          - lastTransitionTime: "2022-02-26T13:45:00Z"
            message: |
              "step-build-and-push" exited with code 1 (image: "docker-pullable://gcr.io/kaniko-project/executor@sha256:68bb272f681f691254acfbdcef00962f22efe2f0c1e287e6a837b0abe07fb94b"); for logs run: kubectl -n default logs test-run-9px9j-kaniko-hjk64-pod-bdz98 -c step-build-and-push
            reason: Failed
            status: "False"
            type: Succeeded
        podName: test-run-9px9j-kaniko-hjk64-pod-bdz98
        startTime: "2022-02-26T13:44:48Z"
        steps:
          - container: step-build-and-push
            imageID: docker-pullable://gcr.io/kaniko-project/executor@sha256:68bb272f681f691254acfbdcef00962f22efe2f0c1e287e6a837b0abe07fb94b
            name: build-and-push
            terminated:
              containerID: docker://e41c6c47f993805a26c5af400564ee9addf1134228ec5600284cd970d60f819b
              exitCode: 1
              finishedAt: "2022-02-26T13:45:00Z"
              reason: Error
              startedAt: "2022-02-26T13:44:55Z"
        taskSpec:
          description: |-
            This Task builds source into a container image using Google's kaniko tool.
            Kaniko doesn't depend on a Docker daemon and executes each command within a Dockerfile completely in userspace. This enables building container images in environments that can't easily or securely run a Docker daemon, such as a standard Kubernetes cluster.
          params:
            - description: Name (reference) of the image to build.
              name: IMAGE
              type: string
            - default: ./Dockerfile
              description: Path to the Dockerfile to build.
              name: DOCKERFILE
              type: string
            - default: ./
              description: The build context used by Kaniko.
              name: CONTEXT
              type: string
            - default: []
              name: EXTRA_ARGS
              type: array
            - default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
              description: The image on which builds will run (default is v1.5.1)
              name: BUILDER_IMAGE
              type: string
          results:
            - description: Digest of the image just built.
              name: IMAGE-DIGEST
          steps:
            - args:
                - $(params.EXTRA_ARGS[*])
                - --dockerfile=$(params.DOCKERFILE)
                - --context=$(workspaces.source.path)/$(params.CONTEXT)
                - --destination=$(params.IMAGE)
                - --digest-file=/tekton/results/IMAGE-DIGEST
              image: $(params.BUILDER_IMAGE)
              name: build-and-push
              resources: {}
              securityContext:
                runAsUser: 0
              workingDir: $(workspaces.source.path)
          workspaces:
            - description: Holds the context and docker file
              name: source
            - description: Includes a docker `config.json`
              mountPath: /kaniko/.docker
              name: dockerconfig
              optional: true
